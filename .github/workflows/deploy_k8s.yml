name: Deploy on Kubernetes Cluster
on:
    workflow_call:

        inputs:
            ref_name:
                required: true
                type: string
                description: tag or branch name
            namespace:
                required: true
                type: string
                description: e.g. ubique, swisstopo, schweizmobil
            app_name:
                required: true
                type: string
                description: e.g. ub-pushserver, swisstopo-ws, schweizmobil-ws
            app_directory:
                required: true
                type: string
                description: e.g. ub-pushservive/ub-pushserver, swisstopo-backend/swisstopo-ws, schweizmobil-backend/schweizmobil-ws
            target:
                required: true
                type: string
                description: dev|prod

        secrets:
            acr_registry:
                required: true
            acr_username:
                required: true
            acr_password:
                required: true
            az_service_principal:
                required: true

env:
    SECRET_NAME: ub-acr-secret
    CLUSTER_NAME: ub-kub-dev
    CLUSTER_RESOURCE_GROUP: ub-schweiz-cluster
    CONFIG_MAP: ${{ inputs.app_name }}-${{ inputs.target }}-config

jobs:
    deploy:
        runs-on: ubuntu-latest
        steps:
            -   name: Checkout
                uses: actions/checkout@v2
                with:
                    ref: ${{ inputs.ref_name }}

            -   name: Set AKS context
                uses: azure/aks-set-context@v1
                with:
                    creds: '${{ secrets.az_service_principal }}'
                    cluster-name: ${{ env.CLUSTER_NAME }}
                    resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}

            -   name: Create namespace (if it doesn't exist)
                run: |
                    kubectl create namespace ${{ inputs.namespace }} --dry-run=client -o json | kubectl apply -f -

            -   name: Create configmap
                run: |
                    kubectl create configmap --namespace ${{ inputs.namespace }} ${{ env.CONFIG_MAP }} --from-file ${{ inputs.app_directory }}/conf/${{ inputs.target }} --dry-run=client -o json | kubectl apply -f -

            -   name: Create image pull secret for ACR
                uses: azure/k8s-create-secret@v1
                with:
                    container-registry-url: ${{ secrets.acr_registry }}
                    container-registry-username: ${{ secrets.acr_username }}
                    container-registry-password: ${{ secrets.acr_password }}
                    secret-name: ${{ env.SECRET_NAME }}
                    namespace: ${{ inputs.namespace }}

            -   name: Apply Deployment and Service config
                uses: azure/k8s-deploy@v1
                with:
                    manifests: |
                        ${{ inputs.app_directory }}/manifests/${{ inputs.target }}/deployment.yaml
                        ${{ inputs.app_directory }}/manifests/${{ inputs.target }}/service.yaml
                    images: |
                        ${{ secrets.acr_registry }}/${{ inputs.app_name }}:${{ inputs.ref_name }}
                    imagepullsecrets: |
                        ${{ env.SECRET_NAME }}
                    namespace: ${{ inputs.namespace }}

            -   name: Apply Ingress config
                uses: azure/k8s-deploy@v1
                with:
                    manifests: |
                        ${{ inputs.app_directory }}/manifests/${{ inputs.target }}/ingress.yaml
                    imagepullsecrets: |
                        ${{ env.SECRET_NAME }}
                    namespace: ingress-basic